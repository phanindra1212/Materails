 **Introduction**
``````````````````

Angular : Angular is a Client side Java Script FrameWork which allows you to create a reactive Single Page Application
          it is an open source,cross platform,cross browser compatible
          it is developed by google,it is completely developed using type script 
##Single Page Appn: 
A single-page application is an app that works inside a browser and does not require page reloading during use.
Example  Gmail, Google Maps, Facebook or GitHub

Reference Links for Version Information 

https://medium.com/@lifenshades/difference-among-angular-8-7-6-5-4-3-2-breakdown-new-features-and-changes-811fb5f8e6f0
https://www.angularminds.com/blog/article/comparison-between-angular-6-vs-angular-7-vs-angular-8.html


Versions of Angular
• Angular 2 : Sep 14th 2016
• Angular 4 : Mar 23rd 2017 [Angular 3.0 was skipped due to misalignment of router package 3.3.0]
• Angular 5 : Nov 1st 2017
• Angular 6 : Apr 2018
• Angular 7 : Oct 2018
• Angular 8 : Apr 2019
• Angular 9 : Feb  2020 


AngularJS 
================
it is developed using javascript 
MVC 
Controllers 
Scopes
No Support for CLI 
SPA


####Angular 2
Released in 2016
Complete rewrite of Angular 1
Written entirely in typescript
Component-based instead of Controller
ES6 and typescript supported
More testable as component-based
Support for Mobile/Low-end devices
Up to typescript 1.8 is supported

****** Angular 3 **** 
####Angular 4

Angular 4
Released in 2017
Changes in core library
Typescript 2.1 & 2.2 
Angular 4 is simply the next version of angular 2, the underlying concept is the same & is an inheritance from Angular 2
Lot of performance improvement is made to reduce size of AOT compiler generated code
Typescript 2.1 & 2.2 compatible — all feature of ts 2.1 & 2.2 are supported in Angular 4 application
Animation features are separated from @angular/core to @angular/animation
— don’t import @animation packages into the application to reduce bundle size and it gives the performance improvement.
Else block in *ngIf introduced:
— Instead of writing 2 ngIf for else , simply add below code in component template:
*ngIf=”yourCondition; else myFalsyTemplate”
“<ng-template #myFalsyTemplate>Else Html</ng-template>”



Angular 5
Released 1st November 2017
Typescript 2.3 
Build optimizer: It helps to removed unnecessary code from your application
Angular Universal State Transfer API and DOM Support — By using this feature, we can now share the state of the application between the server side and client side very easily.
Compiler Improvements: This is one of the very nice features of Angular 5, which improved the support of incremental compilation of an application.
Preserve White space: To remove unnecessary new lines, tabs and white spaces we can add below code(decrease bundle size)
// in component decorator you can now add:
“preserveWhitespaces: false”
// or in tsconfig.json:
“angularCompilerOptions”: { “preserveWhitespaces”: false}`
Increased the standardization across all browsers: For internationalization we were depending on `i18n` , but in ng 5 provides a new date, number, and currency pipes which increases the internationalization across all the browsers and eliminates the need of i18n polyfills.
exportAs: In Angular 5, multiple names support for both directives and components
HttpClient: until Angualar 4.3 @angular/HTTP was been used which is now depreciated and in Angular 5 a new module called HttpClientModule is introduced which comes under @angular/common/http package.
Few new Router Life-cycle Events being added in Angular 5: In Angular 5 few new life cycle events being added to the router and those are:
ActivationStart, ActivationEnd, ChildActivationStart, ChildActivationEnd, GuardsCheckStart, GuardsCheckEnd, ResolveStart and ResolveEnd.
Angular 5 supports TypeScript 2.3 version.
Improved in faster Compiler support:
A huge improvement made in an Angular compiler to make the development build faster. We can now take advantage of by running the below command in our development terminal window to make the build faster.
ng serve/s — aot


*******Angular 6**********
Released on April 2018
This release is focused less on the underlying framework, and more on tool-chain and on making it easier to move quickly with angular in the future
No major breaking changes
Dependency on RxJS 6 (this upgrade have breaking changes but CLI command helps in migrating from older version of RxJS)
Synchronizes major version number of the:
— Angular framework
— Angular CLI
— Angular Material + CDK
All of the above are now version 6.0.0, minor and patch releases though are completely independent and can be changed based on a specific project.
Remove support for <template> tag and “<ng-template>” should be used.
Registering provider: To register new service/provider, we import Service into module and then inject in provider array. e.g:
// app.module.ts
import {MyService} from './my-service';
...
providers: [...MyService]
... 
But after this upgrade you will be able to add providedIn property in injectable decorator. e.g:
// MyService.ts
@Injectable({ providedIn: 'root'})
export class MyService{}
The way ngModelChange event works:
Let’s understand this with output produced by older and this version:
// Angular 5:
<input [(ngModel)]=’name’ (ngModelChange)=’onChange($event)’ />
 onChange(value){ console.log(value); } // Would log updated value
 
<input #modelDir=’ngModel’ [(ngModel)]=’name’ (ngModelChange)=’onChange(modelDir)’ />
 onChange(ngModel: NgModel){ console.log(ngModel.value); } // Would log old value, not updated
// Angular 6:
 onChange(ngModel: NgModel){ console.log(ngModel.value); } // Would log updated value
CLI Changes: Two new commands have been introduced
— ng update <package>
* Analyse package.json and recommend updates to your application
* 3rd parties can provide update scripts using schematics
* automatically update code for breaking changes
* staying update and low maintenance
— ng add
* add new capablities to your applicaiton
* e.g ng add @angular/material : behind the scene it add bit of necessary code and changes project where needed to add it the thing we just told it to add. 
* Now adding things like angular material, progressive web app, service workers & angular elements to your existing ng application will be easy.
CLI + Material starter templates: Let angular create code snippet for your basic components. e.g:
— Material Sidenav
* ng generate @angular/material:material-nav — name=my-nav
Generate a starter template including a toolbar with app name and then the side navigation & it's also responsive
— Dashboard
* ng generate @angular/material:material-dashboard — name=my-dashboard
Generates Dynamic list of cards
— Datatable
* ng generate @angular/material:material-table — name=my-table
Generates Data Table with sorting, filtering & pagination
It uses angular.json instead of .angular-cli.json
Support for multiple projects: Now in angular.json we can add multiple projects
initial release of Angular Elements which gives us ability to use our angular components in other environments like a Vue.js application. Its potential is truly amazing but unfortunately this release only works for angular application, we need to wait for next release to wrap out angular component into custom element and use it with framework like Vue.js




Building Blocks of Angular Apps
================================

Component 
Directive
Service
Module
Filter
D.I
Bindings
Pipes

What is a Component :
The Angular components encapsulates template, data and a behavior of a view. 
In simple words Angular components are nothing but a typescript class with some metadata attached to it 


Lets understand this with an example:

Consider your webpage with a navigation bar at the top and a sidebar menu. For this webpage design you can create 2 components for navigation bar and side bar respectively. Let us see navbar component :

import { Component } from '@angular/core'; 
 
@Component({ 
selector: 'nav-bar-component', 
template: `<div class="navBarContainer">
	<ul (click)="hideNavList()">
		<li>tabsData[0]</li>
		<li>tabsData[1]</li>
		<li>tabsData[2]</li>
	</ul>
</div>`
}) 
 
export class NavBarComponent{ 
	tabsData = ["Home","Contact Us","About Us"];
	constructor() {}
 
	hideNavList() {
		//code to hide the list 
	}
}

Here as you can see in navbar component you have defined your template using unordered list. Also you have provided tabsData as a data to bind to the template and hideNavList() as behavior to the view. Likewise you can create the other components in Angular.

Binding: Connection between HTML element and Component property

i) property binding
ii)attribute binding
iii)style 
iv)class 
v)Event binding
vi)2-way binding 




)Property Binding  : we bind the property of a dom element to a field  in component  
======================
it works with  only one way binding 

Ex :
====

<img src ="{{imageValue}}" > My Image </img>
 (or)
<img [src] ="imageValue" > My Image </img>

Interpolatoin : {{component field }}
{{Title}} ----> String Interpolatoin
    (or)
<h2  [textContent]="title">  -------> Property binding 




2)attribute bindings
==================
Binding an Attribute of Html element into component field 

colspan is an html td attribute doesn't have a dom property as colspan so we are using [attr.colspan] 
<td colspan="2" > </td>    --------> <td [attr.colspan]="2" >

Class Binding 

<button class="btn btn-primary"  [class.active]={isActive}>

based on some condition we want to add active class dynamically  


Style binding 


<button [style.background] = "isActive ? 'blue' : 'white'}"> 


Event Binding  which we used to handle event raised by dom like Button click,mouse over,mouseout,keyup etc ...


* () used for  ----> For Event Binding 

Bind this as a method on a component

<button (click)="onSave();"> Save  </button>\

Event Filtering 
===============

in template 
<input (keyup) =onKeyup() />

in componet

onKeyup($event)
{

 if($event.code =="13")
{
console.log("enter key was pressed")
}
}

(or) 
<input (keyup.enter) =onKeyup() />
in componet

onKeyup()
{
	console.log("enter key was pressed")

}

***************************************************************************************************************************************************************************

Template  Variable
*********
email
i)  event.target.value gives the value entered in input field
       (or )
ii) template :   ~
								< input #email (keyup.enter) =onKeyup(value) />
			     ~

	onKeyup(email)
	{
		console.log(email);
	}

	
	
***************************************************************************************************************************************************************************
	
	2 way binding :
	
	===========================
					1 way binding example 
					
					<input [value] ="email" (keyup.enter)="onKeyup();"

					Component.ts : 
					email :String="phanindra1212@gmail.com";
					onkeyup()
					{
					   console.log(this.email);
					}

	2 way binding : Approach 1:
	
	template : ~
				<input [value] ="email" (keyup.enter)="email =$event.target.value=onKeyup()"
		2 way binding : Approach 2:
			     <input [(ngModel)] ="email" (keyup.enter)="onKeyup()" />
	
	
			~
			
	Component :
	==========

  export class eventComponent
  email="me@example.com"
  
  onKeyup()
  {
    console.log(this.email);
  }
  
  ngModel we need to excliptly import 
  
  One way data binding:
	From component to view template - interpolation, property binding, attribute binding etc.
interpolation:
	converts to property binding
	To concatinate strings - {{}}
property binding
	any(string or non-string) values can be bind
	[x]='x'
attribute binding
	[attr.colspan]="columnspan"
class binding
	[class]="classesToApply"
	[class.boldClass]="true"
	[ngClass] = "addClasses()"
style binding
	[style.font-weight]="Bold"
	[style.font-size.px]='20'
	[ngstyle]="addstyles()"
event binding
	(click)="onclick()"
two way binding(combination of property binding and event binding)[()]
	[(ngModel)]=''
	import { FormsModule } from '@angular/forms';


Angular Life Cycle Hooks
========================
Constructor: We can use constructor to perform default values to the properties of a component .
ngOnChanges:when assigning of new values for i/p properties this hook is called  ,if and only iff component has Input propertiy
ngonInit:next hook ngOnInit is used to perform servie to get data from databases or any other source.
ngDoCheck: excueted when an event occurs like keyboard press ,click etc ,used to detect change detection happended or not 
ngAfterContentInit:it is called after initiliztion the content of a component used to set properties of content childern.
ngContentChecked:exceutes after changeDetection Process is completed.use this to any properties of content childern,those are having specific values are not
ngViewInit:exceute after initilizing the view template.used used to set properties of view childern.
ngViewChecked:exceutes after changeDetection Process of view is completed. use this to any properties of view childern,those are having specific values are not
## ngonDestory:removed from the array or removed from webpage or close the browser


Angular executes its lifecycle hook methods in a specific order.

Component Life Cycle Hook

These stages are mainly divided into two phases – one is linked to the component itself and another is linked to the children of that component.

ngOnChanges – This event executes every time when a value of an input control within the component has been changed. Actually, this event is fired first when a value of a bound property has been changed. It always receives a change data map, containing the current and previous value of the bound property wrapped in a SimpleChange.
ngOnInit – This event initializes after Angular first displays the data-bound properties or when the component has been initialized. This event is basically called only after the ngOnChanges()events. This event is mainly used for the initialize data in a component.
ngDoCheck – This event is triggered every time the input properties of a component are checked. We can use this hook method to implement the check with our own logic check. Basically, this method allows us to implement our own custom change detection logic or algorithm for any component.
ngAfterContentInit –  This lifecycle method is executed when Angular performs any content projection within the component views. This method executes when all the bindings of the component need to be checked for the first time. This event executes just after the ngDoCheck() method. This method is basically linked with the child component initializations.
ngAfterContentChecked – This lifecycle hook method executes every time the content of the component has been checked by the change detection mechanism of Angular. This method is called after the ngAfterContentInit() method. This method is also called on every subsequent execution of ngDoCheck(). This method is also mainly linked with the child component initializations.
ngAfterViewInit – This lifecycle hook method executes when the component’s view has been fully initialized. This method is initialized after Angular initializes the component’s view and child views. It is called after ngAfterContentChecked(). This lifecycle hook method only applies to components.
ngAfterViewChecked – This method is called after the ngAterViewInit() method. It is executed every time the view of the given component has been checked by the change detection algorithm of Angular. This method executes after every subsequent execution of the ngAfterContentChecked(). This method also executes when any binding of the children directives has been changed. So this method is very useful when the component waits for some value which is coming from its child components.
ngOnDestroy – This method will be executed just before Angular destroys the components. This method is very useful for unsubscribing from the observables and detaching the event handlers to avoid memory leaks. Actually, it is called just before the instance of the component is finally destroyed. This method is called just before the component is removed from the DOM.
Interfaces


# Communication Between Components

In Angular 2 a component can share data and information with another component by passing data or events. A component can be used inside another component, thus creating a component hierarchy. The component being used inside another component is known as the child component and the enclosing component is known as the parent component. Components can communicate to each other in various ways, including:

Using @Input()
Using @Output()
Using Services
Parent component calling ViewChild
Parent interacting with child using a local variable
  
  







